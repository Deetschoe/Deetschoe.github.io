            frequencyLayers.appendChild(layerElement);
        }

        function animateLaser() {
            const bufferLength = analyser.frequencyBinCount;
            const dataArray = new Uint8Array(bufferLength);
            analyser.getByteTimeDomainData(dataArray);

            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            const time = audioContext.currentTime;

            ctx.beginPath();
            ctx.strokeStyle = `hsl(${time * 50 % 360}, 100%, 50%)`;
            ctx.lineWidth = 2;

            for (let i = 0; i < 360; i++) {
                const angle = (i / 180) * Math.PI;
                let x = 0;
                let y = 0;

                oscillators.forEach((osc, index) => {
                    const frequency = osc.frequency.value;
                    const amplitude = gainNodes[index].gain.value;
                    x += (Math.sin(angle * frequency / 100) * amplitude * canvas.width / 6);
                    y += (Math.sin(angle * frequency / 150 + time) * amplitude * canvas.height / 6);
                });

                x += canvas.width / 2;
                y += canvas.height / 2;

                if (i === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
            }

            ctx.stroke();
            ctx.shadowBlur = 20;
            ctx.shadowColor = '#ff0000';

            ctx.beginPath();
            ctx.strokeStyle = '#ff0000';
            ctx.lineWidth = 2;

            const sliceWidth = canvas.width * 1.0 / bufferLength;
            let x = 0;

            for (let i = 0; i < bufferLength; i++) {
                const v = dataArray[i] / 128.0;
                const y = v * canvas.height / 2;

                if (i === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }

                x += sliceWidth;
            }

            ctx.lineTo(canvas.width, canvas.height / 2);
            ctx.stroke();

            animationId = requestAnimationFrame(animateLaser);
        }

        updateFrequency();
        updateAmplitude();
    </script>
</body>
</html>